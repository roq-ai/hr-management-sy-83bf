generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model employee {
  id                                                                   String                   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                                                              String                   @db.Uuid
  organization_id                                                      String                   @db.Uuid
  hire_date                                                            DateTime                 @db.Date
  job_title                                                            String                   @db.VarChar(255)
  department                                                           String                   @db.VarChar(255)
  created_at                                                           DateTime                 @default(now()) @db.Timestamp(6)
  updated_at                                                           DateTime                 @default(now()) @db.Timestamp(6)
  organization                                                         organization             @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user                                                                 user                     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payroll                                                              payroll[]
  performance_evaluation_performance_evaluation_employee_idToemployee  performance_evaluation[] @relation("performance_evaluation_employee_idToemployee")
  performance_evaluation_performance_evaluation_evaluator_idToemployee performance_evaluation[] @relation("performance_evaluation_evaluator_idToemployee")
  vacation                                                             vacation[]
}

model organization {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?    @db.VarChar(255)
  name        String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  user_id     String     @db.Uuid
  tenant_id   String     @db.VarChar(255)
  employee    employee[]
  user        user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payroll {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  salary      Int
  bonus       Int?
  deductions  Int?
  pay_date    DateTime @db.Date
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model performance_evaluation {
  id                                                     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id                                            String   @db.Uuid
  evaluator_id                                           String   @db.Uuid
  evaluation_date                                        DateTime @db.Date
  score                                                  Int
  comments                                               String?  @db.VarChar(255)
  period                                                 String   @db.VarChar(255)
  created_at                                             DateTime @default(now()) @db.Timestamp(6)
  updated_at                                             DateTime @default(now()) @db.Timestamp(6)
  employee_performance_evaluation_employee_idToemployee  employee @relation("performance_evaluation_employee_idToemployee", fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  employee_performance_evaluation_evaluator_idToemployee employee @relation("performance_evaluation_evaluator_idToemployee", fields: [evaluator_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  employee     employee[]
  organization organization[]
}

model vacation {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_id String   @db.Uuid
  start_date  DateTime @db.Date
  end_date    DateTime @db.Date
  status      String   @db.VarChar(255)
  days_taken  Int
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
